---
import { blogConfig } from '#'

interface Props {
  title: string
  weather: string
  slug: string
  date: {
    pubDate: Date
    patchDate: Date
  }
}

const { title, weather, date, slug } = Astro.props

const weatherIcon =
  blogConfig.markdown.weathers[weather as keyof typeof blogConfig.markdown.weathers]

const pubDate = date.pubDate.toLocaleDateString('zh-CN', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
})
---

<header class="my-16 text-var-md-heading mx-xs lg:mx-0">
  <h1>
    <span>{title}</span>
  </h1>
  <p class="text-lg font-normal flex flex-wrap items-center">
    <i class={`${weatherIcon} text-xl`}></i>
    <time title="创建日期" datetime={pubDate} class="mx-xs">
      {pubDate}
    </time>
    {
      date.pubDate.getTime() !== date.patchDate.getTime() && (
        <>
          <i class="i-uil-band-aid mr-1" />
          <time
            id="patch-time"
            title="更新时间"
            class="mr-xs"
            datetime={date.patchDate.toUTCString()}
          />
        </>
      )
    }
    <i class="i-uil-eye mr-1"></i>
    <span
      title="阅读量"
      class="waline-pageview-count"
      data-path={`/posts/${slug}`}
    >
      -
    </span>
  </p>
</header>

<script>
  import { hydrate } from '@/utils/hydrate'
  import { getRelativeDate } from '@/utils/relative-time'

  hydrate(() => {
    const PATCH_TIME = document.getElementById(
      'patch-time'
    ) as HTMLTimeElement | null

    if (PATCH_TIME !== null) {
      PATCH_TIME.innerText = getRelativeDate(new Date(PATCH_TIME.dateTime))
    }
  })
</script>
